# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

"""
This is a GUI module
"""

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMainWindow
import random
import time

from app.modules.core.logic.general_config import VA_VERSION


class Ui_MainWindow(object):
    def setupUi(self, MainWindow, va_name):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(474, 304)
        MainWindow.setAnimated(True)

        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.listWidget = QtWidgets.QListWidget(parent=self.centralwidget)
        self.listWidget.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.listWidget.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.listWidget.setObjectName("listWidget")
        self.gridLayout.addWidget(self.listWidget, 0, 0, 2, 2)
        self.lineEdit = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 2, 0, 1, 1)
        self.verticalSlider = QtWidgets.QSlider(parent=self.centralwidget)
        self.verticalSlider.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.gridLayout.addWidget(self.verticalSlider, 1, 2, 1, 1)
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 2, 1, 1, 1)

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 474, 22))
        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.va_name = va_name

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", f"{self.va_name} {VA_VERSION}"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Enter your message"))
        self.pushButton.setText(_translate("MainWindow", "Send message"))


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, core, system_name, name) -> None:  # client, dialog, mod):
        super().__init__()

        self.logic_core = core
        self.va_system_name = system_name
        self.va_name = name

        self.setupUi(self, self.va_name)

        # self.client = client
        # self.dialog = dialog
        # self.mod = mod
        # self.music = ''

        self.pushButton.clicked.connect(self.button_clicked)
        self.pushButton.setCheckable(True)

    def __str__(self):
        return f"Main window of {self.logic_core.va_system_name} (ID: {self.logic_core.va_id}) GUI"

    def button_clicked(self) -> None:
        print("Clicked!")
        entered_message = self.lineEdit.text()

        # If message is not empty
        if entered_message.strip() != '':
            self.listWidget.addItem(f"User: {entered_message}")
            print(f"Entered message: {entered_message}")

            self.lineEdit.setText("")
            time.sleep(random.randint(10, 30) / 1000)

            # response, self.music = dialogue.va_respond(
            #     f"{config.VA_NAME} " * (not(entered_message.startswith(config.VA_NAME))) + entered_message,
            #     self.client,
            #     self.dialog,
            #     self.mod,
            #     self.music
            # )

            # response = self.logic_core.va_respond(
            #     f"{self.va_name} " * (not (entered_message.startswith(self.va_name))) + entered_message)
            response = self.logic_core.va_respond(
                f"{self.va_name} " * ( not(self.logic_core.adm.va_wake_word_recognition(entered_message.split()[0])) ) + entered_message
            )

            self.listWidget.addItem(f"{self.va_system_name}: {response}")

            # if self.mod == "base":
            #     self.listWidget.addItem(dialogue.generate_response(self.dialog, entered_message, self.mod, self.client))
            # elif self.mod == "free":
            #     self.listWidget.addItem(dialogue.generate_response(dialogue_history=self.dialog, message=entered_message, mod=self.mod))

            # print(self.dialog)

    def response_to_audio(self, message) -> str:
        response = ''

        if message.strip() != '':
            self.listWidget.addItem(f"User: {message}")

            response = self.logic_core.va_respond(message)

            self.listWidget.addItem(f"{self.va_system_name}: {response}")

        return response
